import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.FavoriteBorder
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.KeyboardCapitalization
import androidx.compose.ui.unit.dp

data class Dog(val name: String, var isFavorite: Boolean = false)

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            DogApp()
        }
    }
}

@Composable
fun DogApp() {
    var dogName by remember { mutableStateOf("") }
    var dogs by remember { mutableStateOf(listOf<Dog>()) }
    val favoriteDogs = dogs.filter { it.isFavorite }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        // Input field and buttons
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            TextField(
                value = dogName,
                onValueChange = { dogName = it },
                modifier = Modifier.weight(1f),
                placeholder = { Text("Poszukaj lub dodaj pieska 🐕") },
                keyboardOptions = KeyboardOptions(capitalization = KeyboardCapitalization.Words)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Button(
                onClick = {
                    if (dogs.any { it.name == dogName }) {
                        // Show snackbar or toast if the dog already exists
                        dogName = "Piesek istnieje!"
                    } else {
                        dogs = dogs + Dog(dogName)
                        dogName = "" // Clear the input field
                    }
                },
                enabled = dogName.isNotBlank()
            ) {
                Text("+")
            }
        }
        Spacer(modifier = Modifier.height(16.dp))

        // Counters
        Text(text = "🐶: ${dogs.size}   ❤️: ${favoriteDogs.size}")

        Spacer(modifier = Modifier.height(16.dp))

        // List of dogs
        LazyColumn {
            items(dogs) { dog ->
                DogRow(
                    dog = dog,
                    onFavoriteToggle = {
                        dog.isFavorite = !dog.isFavorite
                        dogs = dogs.toMutableList() // Trigger recomposition
                    },
                    onDelete = {
                        dogs = dogs - dog
                    }
                )
            }
        }
    }
}

@Composable
fun DogRow(dog: Dog, onFavoriteToggle: () -> Unit, onDelete: () -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(text = dog.name)
        Row {
            IconButton(onClick = onFavoriteToggle) {
                Icon(
                    imageVector = if (dog.isFavorite) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,
                    contentDescription = "Toggle Favorite"
                )
            }
            IconButton(onClick = onDelete) {
                Icon(
                    imageVector = Icons.Filled.Delete,
                    contentDescription = "Delete Dog"
                )
            }
        }
    }
}
